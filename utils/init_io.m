function [plots_dir, results_dir] = init_io(cfg)
% INIT_IO  Returns (and creates) experiment output folders.

    % 1) Resolve repo root (priority: cfg.io.base_dir > auto-detect > fallback)
    base_dir = getfieldsafe(cfg, {'io','base_dir'}, '');
    if ~isempty(base_dir) && isfolder(base_dir)
        repo_root = base_dir;
    else
        % Try to infer from the location of this file (../../ from utils)
        here = mfilename('fullpath');
        repo_root = fileparts(fileparts(here));  % adjust if you move init_io
        if ~isfolder(repo_root)
            % Last resort: user expectation path or PWD
            default_root = 'C:\Users\aybuk\MATLAB\ddra-cedim';
            if isfolder(default_root)
                repo_root = default_root;
            else
                repo_root = pwd;  % fallback
                warning('init_io:repoRoot', ...
                    'Could not verify repo_root; using PWD: %s', repo_root);
            end
        end
    end

    base_results  = fullfile(repo_root, 'experiments', 'results');
    data_root     = fullfile(base_results, 'data');
    plots_root    = fullfile(base_results, 'plots');

    % 2) Tag for subfolders
    tag = sanitize_tag(getfieldsafe(cfg, {'io','save_tag'}, 'run'));
    results_dir = fullfile(data_root,  [tag '_sweeps']);
    plots_dir   = fullfile(plots_root, [tag '_sweeps']);

    % 3) Create dirs
    ensure_dir(base_results);
    ensure_dir(data_root);
    ensure_dir(plots_root);
    ensure_dir(results_dir);
    ensure_dir(plots_dir);

    % 4) Echo where weâ€™ll write (helps debugging)
    fprintf('[init_io] repo_root = %s\n', repo_root);
    fprintf('[init_io] results -> %s\n', results_dir);
    fprintf('[init_io] plots   -> %s\n', plots_dir);

    % 5) Add to .gitignore (best-effort)
    try
        add_results_to_gitignore(repo_root);
    catch ME
        warning('init_io:gitignore','Skipping .gitignore update: %s', ME.message);
    end
end

% ----------------- helpers -----------------
function ensure_dir(p)
    if ~exist(p,'dir'), mkdir(p); end
end

function tag = sanitize_tag(tag)
    if nargin==0 || isempty(tag), tag='run'; end
    if ~(ischar(tag) || isstring(tag)), tag = char(string(tag)); end
    tag = char(strtrim(tag));
    tag = regexprep(tag, '[^A-Za-z0-9_\-\.]+', '_');
    if isempty(tag), tag='run'; end
end

function val = getfieldsafe(S, path, defaultVal)
    % get nested field if it exists; else default
    try
        val = S;
        for i=1:numel(path)
            if ~isstruct(val) || ~isfield(val, path{i})
                val = defaultVal; return;
            end
            val = val.(path{i});
        end
    catch
        val = defaultVal;
    end
end

function add_results_to_gitignore(repo_root)
    gi = fullfile(repo_root, '.gitignore');
    lines = {
        ''
        '# Experiment outputs (generated by init_io)'
        'experiments/results/'
    };
    if exist(gi,'file')
        txt = fileread(gi);
        if ~contains(txt, 'experiments/results/')
            fid = fopen(gi,'a'); cleanup = onCleanup(@() fclose(fid));
            fprintf(fid, '\n%s\n', strjoin(lines, newline));
        end
    else
        fid = fopen(gi,'w'); cleanup = onCleanup(@() fclose(fid));
        fprintf(fid, '%s\n', strjoin(lines, newline));
    end
end
