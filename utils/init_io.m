function [plots_dir, results_dir] = init_io(cfg)
% INIT_IO  Returns (and creates) experiment output folders.
%   Keeps run_sweeps() API unchanged.

    % --- Repo root & fixed layout ---
    repo_root     = 'C:\Users\aybuk\MATLAB\ddra-cedim';
    base_results  = fullfile(repo_root, 'experiments', 'results');
    data_root     = fullfile(base_results, 'data');
    plots_root    = fullfile(base_results, 'plots');

    % --- Subfolder per experiment tag (to avoid clobbering) ---
    io = getfield(cfg,'io');
    if isstruct(io) && isfield(io,'save_tag')
        tag = sanitize_tag(io.save_tag);
    else
        tag = sanitize_tag('run');
    end

    results_dir = fullfile(data_root,  [tag '_sweeps']);
    plots_dir   = fullfile(plots_root, [tag '_sweeps']);

    % --- Create dirs if missing ---
    ensure_dir(base_results);
    ensure_dir(data_root);
    ensure_dir(plots_root);
    ensure_dir(results_dir);
    ensure_dir(plots_dir);

    % --- Make sure outputs are ignored by git (idempotent) ---
    add_results_to_gitignore(repo_root);
end

% helpers ---------------------------------------------------------------

function ensure_dir(p)
    if ~exist(p,'dir'), mkdir(p); end
end

function tag = sanitize_tag(tag)
    % Accept string/char/numeric; fall back to 'run'
    if nargin == 0 || isempty(tag)
        tag = 'run';
    elseif ~ischar(tag) && ~isstring(tag)
        tag = char(string(tag));
    else
        tag = char(tag);
    end

    tag = strtrim(tag);
    % Use a plain char regex (no regexpPattern) for broad MATLAB compatibility
    % Keep only [A-Za-z0-9 _ - .], replace everything else with '_'
    tag = regexprep(tag, '[^A-Za-z0-9_\-\.]+', '_');

    if isempty(tag)
        tag = 'run';
    end
end


function add_results_to_gitignore(repo_root)
    gi = fullfile(repo_root, '.gitignore');
    lines = {
        ''
        '# Experiment outputs (generated by run_sweeps/init_io)'
        'experiments/results/'
    };
    if exist(gi,'file')
        txt = fileread(gi);
        if ~contains(txt, 'experiments/results/')
            fid = fopen(gi,'a'); cleanup = onCleanup(@() fclose(fid));
            fprintf(fid, '\n%s\n', strjoin(lines, newline));
        end
    else
        fid = fopen(gi,'w'); cleanup = onCleanup(@() fclose(fid));
        fprintf(fid, '%s\n', strjoin(lines, newline));
    end
end
