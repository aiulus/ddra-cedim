function OPT = solver_setup(varargin)
%SOLVER_SETUP  Recommended options for quadprog/fmincon on R2025a + Apple Silicon.
% Usage:
%   OPT = solver_setup();              % defaults
%   OPT = solver_setup('parallel',0);  % force single-thread/serial for bit-stability

p = inputParser;
addParameter(p,'parallel',true,@(x)islogical(x)||ismember(x,[0 1]));
addParameter(p,'threads',[],@(x)isempty(x)||isscalar(x));
parse(p,varargin{:});
usePar = logical(p.Results.parallel);
nThreads = p.Results.threads;

% --- Determinism knobs ---
rng(1,'twister');                 % reproducible randomness across runs
if ~isempty(nThreads)
    maxNumCompThreads(nThreads);  % pin BLAS threads if you want strict reproducibility
end

% --- QP: quadprog ---
qp = optimoptions('quadprog', ...
    'Algorithm','interior-point-convex', ...
    'Display','off', ...
    'MaxIterations', 400, ...
    'ConstraintTolerance',1e-9, ...
    'OptimalityTolerance', 1e-9, ...
    'StepTolerance',       1e-12);

% --- NLP: fmincon (if any gray step uses it) ---
nlp = optimoptions('fmincon', ...
    'Algorithm','interior-point', ...
    'Display','off', ...
    'FiniteDifferenceType','forward', ...
    'FiniteDifferenceStepSize',1e-6, ...
    'SpecifyObjectiveGradient','off', ...
    'MaxFunctionEvaluations', 2e5, ...
    'MaxIterations',          1e3, ...
    'ConstraintTolerance', 1e-9, ...
    'OptimalityTolerance', 1e-9, ...
    'StepTolerance',       1e-12, ...
    'UseParallel', logical(usePar));

OPT.qp  = qp;
OPT.nlp = nlp;
end
