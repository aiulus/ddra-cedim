function [plots_dir, results_dir, repo_root] = init_io(cfg)
% INIT_IO  Returns (and creates) experiment output folders.

    % --- 1) Resolve repo root (cfg.io.base_dir > auto > fallback) ---
    base_dir = getfieldsafe(cfg, {'io','base_dir'}, '');
    if ~isempty(base_dir) && isfolder(base_dir)
        bd = base_dir;
        if endsWith(lower(bd), [filesep 'experiments'])
            bd = fileparts(bd); % step back if pointed at /experiments
        end
        repo_root = find_repo_root(bd);
    else
        here = fileparts(mfilename('fullpath'));   % .../utils/io
        repo_root = find_repo_root(here);
    end

    % Normalize: never return the experiments folder itself
    if endsWith(lower(repo_root), [filesep 'experiments'])
        repo_root = fileparts(repo_root);
    end

    % --- 2) Build roots (no duplicate 'experiments') ---
    base_results  = fullfile(repo_root, 'experiments', 'results');
    data_root     = fullfile(base_results, 'data');
    plots_root    = fullfile(base_results, 'plots');

    % Tag (this was missing)
    tag = sanitize_tag(getfieldsafe(cfg, {'io','save_tag'}, 'run'));

    results_dir = fullfile(data_root,  [tag '_sweeps']);
    plots_dir   = fullfile(plots_root, [tag '_sweeps']);

    % --- 3) Create dirs ---
    ensure_dir(base_results); ensure_dir(data_root);
    ensure_dir(plots_root);   ensure_dir(results_dir); ensure_dir(plots_dir);

    % --- 4) Echo ---
    fprintf('[init_io] repo_root = %s\n', repo_root);
    fprintf('[init_io] results -> %s\n', results_dir);
    fprintf('[init_io] plots   -> %s\n', plots_dir);

    % --- 5) .gitignore best-effort ---
    try, add_results_to_gitignore(repo_root); catch ME
        warning('init_io:gitignore','Skipping .gitignore update: %s', ME.message);
    end
end

function root = find_repo_root(startDir)
    d = startDir; root = '';
    for i = 1:8
        hasExp = isfolder(fullfile(d,'experiments'));
        hasUtilsOrGit = isfolder(fullfile(d,'utils')) || isfolder(fullfile(d,'.git'));
        if hasExp && hasUtilsOrGit, root = d; break; end
        nd = fileparts(d); if strcmp(nd,d), break; end; d = nd;
    end
    if isempty(root), root = startDir; end
    if endsWith(lower(root), [filesep 'experiments'])
        root = fileparts(root); % ensure parent of /experiments
    end
end

% (keep your helpers: ensure_dir, sanitize_tag, getfieldsafe, add_results_to_gitignore)


% ----------------- helpers -----------------
function root = parent_of_utils(here)
    % return parent folder of the last 'utils' segment in path; else ''
    parts = strsplit(here, filesep);
    u = find(strcmpi(parts,'utils'), 1, 'last');
    if isempty(u) || u <= 1
        root = '';
    else
        root = fullfile(parts{1:u-1});
        % On Windows, fullfile(parts{...}) returns a relative path;
        % re-prepend drive if original path was absolute
        if ispc && ~isempty(here) && ~contains(root, ':\')
            [drv,~,~] = fileparts(here);  % keeps drive letter
            % If drv like 'C:\path\to\utils\io', strip to drive root 'C:\'
            [drvroot,~,~] = fileparts(drv); % still has subdirs; we only need the drive
            if ~isempty(drvroot) && contains(drvroot, ':\')
                % do nothing â€“ root already absolute via fullfile(parts{1:u-1})
            end
        end
    end
end

function root = try_find_repo_root(start_dir)
    % Walk up looking for a top-level marker; else go up 3 levels.
    d = start_dir;
    for up = 1:8
        if exist(fullfile(d,'.git'),'dir') || exist(fullfile(d,'experiments'),'dir')
            root = d; return;
        end
        nd = fileparts(d);
        if strcmp(nd,d), break; end
        d = nd;
    end
    % common layout: .../utils/io  -> repo root is three up
    root = fileparts(fileparts(fileparts(start_dir)));
    if isempty(root), root = pwd; end
end

function ensure_dir(p)
    if ~exist(p,'dir'), mkdir(p); end
end

function tag = sanitize_tag(tag)
    if nargin==0 || isempty(tag), tag='run'; end
    if ~(ischar(tag) || isstring(tag)), tag = char(string(tag)); end
    tag = char(strtrim(tag));
    tag = regexprep(tag, '[^A-Za-z0-9_\-\.]+', '_');
    if isempty(tag), tag='run'; end
end

function val = getfieldsafe(S, path, defaultVal)
    % get nested field if it exists; else default
    try
        val = S;
        for i=1:numel(path)
            if ~isstruct(val) || ~isfield(val, path{i})
                val = defaultVal; return;
            end
            val = val.(path{i});
        end
    catch
        val = defaultVal;
    end
end

function add_results_to_gitignore(repo_root)
    gi = fullfile(repo_root, '.gitignore');
    lines = {
        ''
        '# Experiment outputs (generated by init_io)'
        'experiments/results/'
    };
    if exist(gi,'file')
        txt = fileread(gi);
        if ~contains(txt, 'experiments/results/')
            fid = fopen(gi,'a'); cleanup = onCleanup(@() fclose(fid));
            fprintf(fid, '\n%s\n', strjoin(lines, newline));
        end
    else
        fid = fopen(gi,'w'); cleanup = onCleanup(@() fclose(fid));
        fprintf(fid, '%s\n', strjoin(lines, newline));
    end
end

