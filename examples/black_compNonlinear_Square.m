
%% 0) Shared setup ---------------------------------------------------------
rng(1,'twister');  % reproducible outer script; conformance_black() uses its own seed

% -- System (CORA) -> MATLAB ss for DDRA demo (optional)
dyn  = "Square"; %% ARX-type system's don't work with ddra_nonlinear 
%dyn = "lorenz_2D";
type = "rand";
[sys_cora, ~, ~] = custom_loadDynamics(dyn, type);
[sys_ddra, handle] = cora_to_ddra_nonlinear(dyn, type);

dim_x = sys_cora.nrOfStates;
dim_u = sys_cora.nrOfInputs;
dim_y = sys_cora.nrOfOutputs;

plot_settings = struct();
plot_settings.projectedDims = {[1 2]};

%% 1) DDRA Linear (optional, for side-by-side intuition) -------------------
lookup_ddra = struct( ...
     'n_s', 1, ...
     'n_m', 1, ...
     'n_k', 120, ...
     'n_k_val', 20, ...
     'eta_x', 1, ...
     'alpha_x', 0.1, ...
     'c_x', ones(dim_x,1), ...
     'c_delta_x', zeros(dim_x,1), ...
     'eta_u', 1, ...
     'alpha_u', 0.25, ...
     'c_u', ones(dim_u, 1), ...
     'c_delta_u', zeros(dim_u, 1), ...
     'c_w', zeros(dim_x, 1), ...
     'alpha_w', 0.005, ...
     'eta_w', 1, ...
     'c_v', zeros(dim_x, 1), ...
     'alpha_v', 0.0, ...
     'eta_v', 1, ...
     'dim_x', dim_x, ...
     'dim_y', dim_y, ...
     'dim_u', dim_u, ...
     'plot_settings', plot_settings ...
 );
%[X_true, X_est] = ddra_nonlinear(sys_ddra, lookup_ddra);

%% 2) Black-box Reachset-Conformance ID -----------------------------------
% EXACT settings as example_nonlinearARX_conform_03_black, but using
% the lookup/conf_opts interface of our conformance_black().
cost_norm    = "interval";           % size metric for reachable sets
constraints  = "half";               % constraint type in conformance fitting
methodsBlack = ["blackGP","blackCGP"];

% Sizes (ID/train/validation)
sizes.id  = struct('n_m',  2, 'n_s', 50, 'n_k', 4);
sizes.tr  = struct('n_m',100, 'n_s', 10, 'n_k', 4);
sizes.val = struct('n_m',  5, 'n_s', 10, 'n_k', 4);

% Reachability options – same as example
options_reach = struct();
options_reach.zonotopeOrder     = 100;
options_reach.tensorOrder       = 2;
options_reach.errorOrder        = 1;
options_reach.tensorOrderOutput = 2;
options_reach.verbose           = false;

% testSuite settings – same as example
options_testS = struct('p_extr', 0.3);

% Plot settings for validateReach()
plot_settings_bb = struct('plot_Yp', false, 'dims', [1 2]);

% Black-box approximation options – identical to example
approx_options = struct();
approx_options.gp_parallel       = false;   % (example ends with false)
approx_options.gp_pop_size       = 50;
approx_options.gp_num_gen        = 30;
approx_options.gp_func_names     = {'times','plus','square'};
approx_options.gp_max_genes      = 2;
approx_options.gp_max_depth      = 2;
approx_options.cgp_num_gen       = 5;
approx_options.cgp_pop_size_base = 5;
approx_options.save_res          = false;
approx_options.p                 = 1;

% Build lookup struct expected by conformance_black()
lookup_black = struct( ...
    'sys',           struct('dyn', dyn, 'type', "rand"), ... % use your preferred uncertainty preset here
    'n_m',           sizes.id.n_m, ...
    'n_s',           sizes.id.n_s, ...
    'n_k',           sizes.id.n_k, ...
    'n_m_train',     sizes.tr.n_m, ...
    'n_s_train',     sizes.tr.n_s, ...
    'n_k_train',     sizes.tr.n_k, ...
    'n_m_val',       sizes.val.n_m, ...
    'n_s_val',       sizes.val.n_s, ...
    'n_k_val',       sizes.val.n_k, ...
    'methodsBlack',  methodsBlack, ...
    'constraints',   constraints, ...
    'plot_settings', plot_settings_bb ...
);

% Build conf_opts struct expected by conformance_black()
conf_opts_black = struct( ...
    'options_reach', options_reach, ...
    'cs',            struct('robustnessMargin', 1e-9, 'cost', cost_norm, 'verbose', false), ...
    'testS',         options_testS, ...
    'approx',        approx_options ...
);

% Run the black-box wrapper (prints stats and produces validation plots)
%R = conformance_black(lookup_black, conf_opts_black);
prefer_gptips_extract_fast();
try
    % your black-box run here:
    R = conformance_black(lookup_black, conf_opts_black);
catch ME
    rethrow(ME);
end
% path automatically restored when `cleanup` goes out of scope
